%Same/Different meaning judgment task 
%   based on Dapretto & Bookheimer, 1999
%
%DESCRIPTION
%In this experiment, participants are presented with pairs of sentences and
%they have to decide whether they mean roughly the same thing.
%
% Function call: SameDiffSe(subjID, list, order, run)
%                eg. EventsRev('test', 1, 1, 1)
%
% RUNTIME: 242 sec (4 min 02 sec, 121 TRs)
%          runs 10x faster if subID is 'debug'
%
% Inputs:
%   -subjID: string of subject ID (eg. 'subj01')
%   -list:   1-2, subset of materials to use
%   -order:  1-4, determines condition block orders
%   -run:    any positive integer, for naming purposes
%
% Output: 
%   -csv containing subject and run information
%       (data/EventsRev_subjID_list_order_run_data.csv)
%
% Go to DISPLAY OPTIONS section to change things like font size, image
% size, speed of movement, etc.
%
%
% 2015-12-03: created (Zach Mineroff - zmineroff@gmail.com)
%             Though a good chunk of this is stolen from
%                * Walid Bendris - wbendris@mit.edu
%                * Brianna Pritchett - bpritche@mit.edu
%
%2016-01-27: updated (ZM)
%            * collect responses during entire trial, including ITI
%            * increase timing of the trials
%            * slow down movement speed of stimuli

function SameDifferentSentences(subjID, list, order, run)
    %% Make sure inputs are valid
    %subjID is a string
	assert(ischar(subjID), 'subjID must be a string');
    
    %list is 1 or 2
    assert(ismember(list, 1:2), 'list must be 1 or 2');
    
    %order is 1 - 4
    assert(ismember(order, 1:4), 'order must be 1, 2, 3 or 4');
    
    %run is a positive integer
    assert((isnumeric(run))&(run>0)&(mod(run,1)==0), 'run must be a positive integer');
    
    
    %% Make sure we don't accidentally overwrite a data file
	DATA_DIR = fullfile(pwd, 'data');
	fileToSave = ['EventsRev_' subjID '_list' num2str(list) '_order' num2str(order) '_run' num2str(run) '_data.csv'];
    fileToSave = fullfile(DATA_DIR, fileToSave);
    
	% Error message if data file already exists.
	if exist(fileToSave,'file') && ~strcmpi(subjID, 'debug')
        str = input('The data file already exists for this subject! Overwrite? (y/n)','s');
        if ~isequal(str,'y')
            error('myfuns:EventsRev:DataFileAlreadyExists', ...
                  'The data file already exists for this subject!');
        end
	end
    
    
    %% Set experiment constants
    %Number of events
    NUM_BLOCKS       = 8;  %Number of non-fixation blocks
    TRIALS_PER_BLOCK = 10; %For a non-fixation block
    NUM_FIX          = 3;  %Number of fixation blocks
    
	%Timing (in seconds)              
    FIX_DUR      = 22;  %Length of fixation
    INSTRUCT_DUR = 2;   %Length of instructions screen
    TRIAL_DUR    = 1.5; %Length of trial
    ITI          = 0.5; %Inter-trial interval
    
    %Make the experiment run faster if subjID is 'debug'
    if strcmpi(subjID, 'debug')
        scale = 0.1;
        FIX_DUR = FIX_DUR * scale;
        INSTRUCT_DUR = INSTRUCT_DUR * scale;
        TRIAL_DUR = TRIAL_DUR * scale;
        ITI = ITI * scale;
    end
    

    %% Set up condition ordering
    %The names of each block
	A = 'Pic_Sem';
    B = 'Pic_Perc';
    C = 'Sent_Sem';
    D = 'Sent_Perc';
    Fix = 'Fix';
    
    %The possible orders the blocks will be presented in
    orders = {Fix, A, B, C, D, Fix, D, C, B, A, Fix;
              Fix, B, C, D, A, Fix, A, D, C, B, Fix;
              Fix, C, D, A, B, Fix, B, A, D, C, Fix;
              Fix, D, A, B, C, Fix, C, B, A, D, Fix};
	
    %blocks is the order the blocks will be presented in for this run
	blocks = orders(order, :);
    
    
    %% Read in and organize the stimuli materials
    %Read in all materials
    materials_filename = 'EventsRev_materials.csv';
    materials = readtable(materials_filename);
    
    %Extract only the materials for the given list
    list_rows = materials.List == list;
    materials = materials(list_rows, :);
    
    %Determine which rows in the materials table are pictures / sentences
    pic_rows  = strcmp(materials.Pic_Sent, 'pic');
    sent_rows = strcmp(materials.Pic_Sent, 'sent');
    
    %Determine which rows in the materials table are plausible / implausible
    plaus_rows   = strcmp(materials.Plaus_Implaus, 'plaus');
    implaus_rows = strcmp(materials.Plaus_Implaus, 'implaus');
                
    %Separate plausible/implausible pictures/sentences
    PlausPic    = materials(plaus_rows & pic_rows, :);
    PlausSent   = materials(plaus_rows & sent_rows, :);
    ImplausPic  = materials(implaus_rows & pic_rows, :);
    ImplausSent = materials(implaus_rows & sent_rows, :);
    
    
    %% Randomly select which materials to use for each condition
    %A given stimulus will be used in a maximum of 1 condition
    
    %Picture-Semantic
        %10 random Plausible Pictures
        rand_rows = randperm(height(PlausPic), TRIALS_PER_BLOCK)';
        PicSem = PlausPic(rand_rows, :);
        PlausPic(rand_rows, :) = [];  %delete the chosen plausible pictures
                                      %so we don't use them again

        %10 random Implausible Pictures
        rand_rows = randperm(height(ImplausPic), TRIALS_PER_BLOCK)';
        PicSem = [PicSem; ImplausPic(rand_rows, :)];
        ImplausPic(rand_rows, :) = [];
    
	 
    %Picture-Perceptual
        %10 random Plausible Pictures
        rand_rows = randperm(height(PlausPic), TRIALS_PER_BLOCK)';
        PicPerc = PlausPic(rand_rows, :);
        PlausPic(rand_rows, :) = [];

        %10 random Implausible Pictures
        rand_rows = randperm(height(ImplausPic), TRIALS_PER_BLOCK)';
        PicPerc = [PicPerc; ImplausPic(rand_rows, :)];
        ImplausPic(rand_rows, :) = [];

        
    %Sentence-Semantic
        %10 random Plausible Sentences
        rand_rows = randperm(height(PlausSent), TRIALS_PER_BLOCK)';
        SentSem = PlausSent(rand_rows, :);
        PlausSent(rand_rows, :) = [];
        
        %10 random Implausible Sentences
        rand_rows = randperm(height(ImplausSent), TRIALS_PER_BLOCK)';
        SentSem = [SentSem; ImplausSent(rand_rows, :)];
        ImplausSent(rand_rows, :) = [];
        
        
    %Sentence-Perceptual
        %10 random Plausible Sentences
        rand_rows = randperm(height(PlausSent), TRIALS_PER_BLOCK)';
        SentPerc = PlausSent(rand_rows, :);
        PlausSent(rand_rows, :) = [];
        
        %10 random Implausible Sentences
        rand_rows = randperm(height(ImplausSent), TRIALS_PER_BLOCK)';
        SentPerc = [SentPerc; ImplausSent(rand_rows, :)];
        ImplausSent(rand_rows, :) = [];
	
	%In case you need to know, the tables PlausPic, ImplausPic, PlausSent,
	%and ImpausSent now only contain UNUSED materials
    
    
	%% Randomize the order of the materials
    %No more than 3 plausible or implausible events will appear in a row
    maxReps = 3;
    constraint_variable = 'Plaus_Implaus';
    
    PicSem   = randomizeTable(PicSem,   constraint_variable, maxReps);
    PicPerc  = randomizeTable(PicPerc,  constraint_variable, maxReps);
    SentSem  = randomizeTable(SentSem,  constraint_variable, maxReps);
    SentPerc = randomizeTable(SentPerc, constraint_variable, maxReps);
    
    
    %Randomly decide which direction each stimulus will move in when it's presented
    PicSem   = assignDirections(PicSem);
    PicPerc  = assignDirections(PicPerc);
    SentSem  = assignDirections(SentSem);
    SentPerc = assignDirections(SentPerc);
    
    
    %% Set up the data that we want to save
    numTrials = (NUM_BLOCKS * TRIALS_PER_BLOCK) + NUM_FIX;
    
    resultsHdr = {'SubjID','List','Order','Run', ...
                  'TrialNumber', 'TrialOnset', ...
                  'Condition', 'ItemNum', 'Item', 'Motion', ...
                  'CorrectAnswer', 'Response', 'Accuracy', 'RT'};
	
    %results is the table that will hold all of the data we want to save
    results = cell(numTrials, length(resultsHdr));
    results = cell2table(results, 'VariableNames', resultsHdr);
    
    %Fill in the user input information
    results.SubjID(:) = {subjID};
    results.List  = ones(numTrials,1)*list;
    results.Order = ones(numTrials,1)*order;
    results.Run   = ones(numTrials,1)*run;
    
    %Enter 0 as the default value for the data that we'll fill in as we go
    filler_data = zeros(numTrials,1);
    results.TrialOnset    = filler_data;
    results.ItemNum       = filler_data;
    results.CorrectAnswer = filler_data;
    results.Response      = filler_data;
    results.Accuracy      = filler_data;
    results.RT            = filler_data;
    
    %Fill in the info we already know
    results.TrialNumber = (1:numTrials)';
    
    trialNum = 1;
    for block = blocks
        %Fill in info for fixtion blocks
        if strcmp(block, 'Fix')
            results.Condition(trialNum) = {'FIX'};
            results.Item(trialNum) = {'+'};
            results.Motion(trialNum) = {'-'};
            trialNum = trialNum + 1;
            continue
        end
        
        %Fill in info for trial blocks
        if strcmp(block, 'Pic_Sem'),      cond_table = PicSem;
        elseif strcmp(block, 'Pic_Perc'), cond_table = PicPerc;
        elseif strcmp(block, 'Sent_Sem'), cond_table = SentSem;
        else                              cond_table = SentPerc;
        end
        
        for i=1:TRIALS_PER_BLOCK
            %General trial information
            results.Condition(trialNum) = block;
            results.ItemNum(trialNum)   = cond_table.ItemNum(i);
            results.Item(trialNum)      = cond_table.Stimulus(i);
            results.Motion(trialNum)    = cond_table.Left_Right(i);
            
            %Correct answers for the semantic task
            if strcmp(block, 'Pic_Sem') || strcmp(block, 'Sent_Sem')
                if strcmp(cond_table.Plaus_Implaus(i), 'plaus')
                    results.CorrectAnswer(trialNum) = 1;
                else
                    results.CorrectAnswer(trialNum) = 2;
                end
            
            %Correct answers for the perceptual task
            else
                if strcmp(cond_table.Left_Right(i), 'left')
                    results.CorrectAnswer(trialNum) = 1;
                else
                    results.CorrectAnswer(trialNum) = 2;
                end
            end
            
            trialNum = trialNum + 1;
        end
    end
    
    
	%% Set up screen and keyboard for Psychtoolbox
    %Screen
%     if strcmpi(subjID, 'debug')
%         PsychDebugWindowConfiguration
%     end
    screenNum = max(Screen('Screens'));  %Highest screen number is most likely correct display
    windowInfo = PTBhelper('initialize',screenNum);
	wPtr = windowInfo{1}; %pointer to window on screen that's being referenced
    rect = windowInfo{2}; %dimensions of the window
        winWidth = rect(3);
        winHeight = rect(4);
    oldEnableFlag = windowInfo{4};
    HideCursor;
    PTBhelper('stimImage',wPtr,'WHITE');
    PTBhelper('stimText',wPtr,'Loading experiment\n\n(Don''t start yet!)',30);
    
%      if strcmpi(subjID, 'debug')
%          [wPtr, rect] = openDebugWindow(screenNum, rect);
%          winWidth = rect(3);
%          winHeight = rect(4);
%      end
    
    %Keyboard
    keyboardInfo = PTBhelper('getKeyboardIndex');
    kbIdx = keyboardInfo{1};
    escapeKey = keyboardInfo{2};
    
    
    %% Set display options
    %Font sizes
    sentFontSize = 40;      %stimuli sentences
    instructFontSize = 30;  %instructions screen before each block
    helpFontSize = 20;      %instructions that appear during each trial
    fixFontSize = 40;       %fixation cross
    
    %Image size (pixels)
    imgHeight = 512;   %image width is automatically scaled
    
    %Simulus movement (lower this to make the perceptual task harder)
    image_speed = 0.025;    %speed of images
    sent_speed  = 0.025;    %speed of sentences
    
    %Instructions (presented before each block)
    semanticInstruct = 'PLAUSIBLE/IMPLAUSIBLE?';
    perceptualInstruct = 'MOVING LEFT/RIGHT?';
    
    %Help instructions (presented during each trial)
    semanticHelp = '(1) Plausible	(2) Implausible';
    perceptualHelp = '(1) Left	(2) Right';
    
    %Help instructions position (pixels)
    helpPosX = 50;  %distance from left of screen
    helpPosY = 800; %distance from top of screen
    
    
	%% Put some variables into structs to help send them to the animate functions
    displayOptions = struct('sentFontSize', sentFontSize, ...
                            'instructFontSize', instructFontSize, ...
                            'helpFontSize', helpFontSize, ...
                            'imgHeight', imgHeight, ...
                            'image_speed', image_speed, ...
                            'sent_speed', sent_speed);
	
    winInfo = struct('wPtr', wPtr, ...
                     'winWidth', winWidth, ...
                     'winHeight', winHeight);
	
	keyInfo = struct('kbIdx', kbIdx, ...
                     'escapeKey', escapeKey);
	
	%Can make something like checkDimensions(display_options) to make sure
    %helpScreen is ok, font sizes all fit, image height is ok, etc
%     if helpPosX > winWidth
%         Screen('CloseAll');
%         ShowCursor;
%         fprintf('\nHelp screen x dimension is set out of window boundaries\n')
%     end
	
    
    %% Set up images
    PICS_DIR = fullfile(pwd, 'pics');
    
    %This is the bottleneck in loading the experiment
    %Maybe decreasing the resolution of the images will help
    PicSem_imgs  = loadImages(wPtr, PICS_DIR, PicSem.Stimulus,  imgHeight);
    PicPerc_imgs = loadImages(wPtr, PICS_DIR, PicPerc.Stimulus, imgHeight);
    
    
    %% Set up help screen
    helpRect = rect;
    
    %Move the help screen right
    helpRect(1) = helpRect(1) + helpPosX;
    helpRect(3) = helpRect(3) + helpPosX;
    
    %Move the help screen down
    helpRect(2) = helpRect(2) + helpPosY;
    helpRect(4) = helpRect(4) + helpPosY;
    
    helpPtr = Screen('OpenWindow',screenNum, 1, helpRect);
    PTBhelper('stimImage',helpPtr,'WHITE');
    
    
    %% Present the experiment
	% Wait indefinitely until trigger
    PTBhelper('stimText',wPtr,'Waiting for trigger...',sentFontSize);
    PTBhelper('waitFor','TRIGGER',kbIdx,escapeKey);
    
    trialNum = 1;
    runOnset = GetSecs; %remains the same
    onset = runOnset;   %updates for each trial
    
    %Present each block
    try
        for block = blocks
            %Fixation
            if strcmp(block, 'Fix')
                %Show fixation cross
                PTBhelper('stimText', wPtr, '+', fixFontSize);
                trialEndTime = onset + FIX_DUR;
                PTBhelper('waitFor',trialEndTime,kbIdx,escapeKey);
                
                %Save data
                results.TrialOnset(trialNum) = onset - runOnset;
                
                %Update loop variables
                trialNum = trialNum + 1;
                onset = trialEndTime;
                
                continue
            end
            
            
            %If it's not a fixation, determine what instructions to show
            if strcmp(block, 'Pic_Sem') || strcmp(block, 'Sent_Sem')
                instructions = semanticInstruct;
                help = semanticHelp;
            else
                instructions = perceptualInstruct;
                help = perceptualHelp;
            end
            
            %Determine which table to use for the trial
            %Picture-Semantic
            if strcmp(block, 'Pic_Sem')
                cond_table = PicSem;
                cond_imgs = PicSem_imgs;
                
            %Picture-Perceptual
            elseif strcmp(block, 'Pic_Perc')
                cond_table = PicPerc;
                cond_imgs = PicPerc_imgs;
                
           	%Sentence-Semantic
            elseif strcmp(block, 'Sent_Sem')
                cond_table = SentSem;
             
            %Sentence-Perceptual
            else
                cond_table = SentPerc;
            end
            
            %Show instructions
            PTBhelper('stimText', wPtr, instructions, instructFontSize);
            instructEndTime = onset + INSTRUCT_DUR;
            PTBhelper('waitFor',instructEndTime,kbIdx,escapeKey);
            onset = instructEndTime;

            %Show help
            Screen('TextSize', helpPtr , helpFontSize);
            DrawFormattedText(helpPtr,help, 0, 0);
            Screen(helpPtr, 'Flip');

            %Show each trial
            for i=1:TRIALS_PER_BLOCK
                %Get the trial end time
                trialEndTime = onset + TRIAL_DUR + ITI;
                
                %animate the image or text
                if strcmp(block, 'Pic_Sem') || strcmp(block, 'Pic_Perc')                   
                    [response, rt] = animateImage(winInfo, keyInfo, ...
                                                  displayOptions, ...
                                                  cond_table, cond_imgs, ...
                                                  i, onset, trialEndTime, ITI);
                
                else
                    [response, rt] = animateText(winInfo, keyInfo, ...
                                                 displayOptions, ...
                                                 cond_table, ...
                                                 i, onset, trialEndTime, ITI);
                end
                
                %Save data
                results.TrialOnset(trialNum) = onset - runOnset;
                results.Response(trialNum) = response;
                results.RT(trialNum) = rt;
                
                
                %Update loop variables
                trialNum = trialNum+1;
                %onset = blankEndTime;
                onset = trialEndTime;
            end

            %Hide help
            PTBhelper('stimImage',helpPtr,'WHITE');
            
            %Remove used stimuli
            if strcmp(block, 'Pic_Sem')
                PicSem(1:TRIALS_PER_BLOCK, :) = [];
                PicSem_imgs(1:TRIALS_PER_BLOCK, :) = [];
                
            elseif strcmp(block, 'Pic_Perc')
                PicPerc(1:TRIALS_PER_BLOCK, :) = [];
                PicPerc_imgs(1:TRIALS_PER_BLOCK, :) = [];
                
            elseif strcmp(block, 'Sent_Sem')
                SentSem(1:TRIALS_PER_BLOCK, :) = [];
                
            else
                SentPerc(1:TRIALS_PER_BLOCK, :) = [];
            end
        end
        
        %runtime = GetSecs - runOnset;
        
        %Calculate the accuracies
        results = grade_results(results);

        %Save all data
        writetable(results, fileToSave);
        
        Screen('CloseAll');
        ShowCursor;
        
    catch errorInfo
        %runtime = GetSecs - runOnset;
        
        %Calculate the accuracies
        results = grade_results(results);
        
        %Save all data
        writetable(results, fileToSave);
        
        Screen('CloseAll');
        ShowCursor;
        fprintf('%s%s\n', 'error message: ', errorInfo.message)
    end
    
    %Restore the old level.
    Screen('Preference','SuppressAllWarnings',oldEnableFlag);
end




%% RandomizeTable
%Randomizes the order of the rows in table table_in
%Doesn't allow more than maxReps of any item in constraint_variable to appear in a row
function [randomized_table] = randomizeTable(table_in, constraint_variable, maxReps)
    numItems = height(table_in);
    
    %Shuffle the materials randomly
    randomized_table = table_in(randperm(numItems), :);
    
    %If there are more than maxReps of the constraint_variable in a row,
    %randomize the materials table again. Repeat as necessary.
    while ~checkMaxReps(randomized_table{:,{constraint_variable}}, maxReps)
        randomized_table = table_in(randperm(numItems), :);
    end
end



%% checkMaxReps
%isShuffled is true if the given cell array contains no more than maxReps
%items in a row anywhere in the array. False otherwise.
function [isShuffled] = checkMaxReps(cell_array, maxReps)
    %if given cell array is an array of doubles, convert it to a cell array
    %of strings
    if isnumeric(cell_array)
        cell_array = cellstr(num2str(cell_array));
    end
    
    %Initialize isShuffled to true
    isShuffled = true;
    
    %isShuffled is true if the length of cell_array
    %is less than or equal to maxReps
    numElts = length(cell_array);
    if numElts <= maxReps
        return
    end
    
    %Loop through cell_array to see if there are more than maxReps
    %repetitions. Set isShuffled to false if there are.
    for i = (maxReps+1):numElts
        stringToCompare = cell_array(i);
        sub_array = cell_array(i-maxReps:i-1);
        
        if all(strcmp(sub_array, stringToCompare))
            isShuffled = false;
            return
        end 
    end
end



%% AssignDirections
%Adds the variable Left_Right to the last column of table_in
%Each row of Left_Right is randomly chosen to be 'left' or 'right'
function [new_table] = assignDirections(table_in)
    numRows = height(table_in);
    Left_Right = cell(numRows, 1);
    
    %An array of random 1's and 0's
    coinToss = round(rand(1,numRows))';
    
    Left_Right(coinToss==0) = {'left'};
    Left_Right(coinToss==1) = {'right'};
    
    new_table = [table_in table(Left_Right)];
end




%% loadImages
%wPtr: window pointer
%pics_dir: path to folder that contains images
%filenames: cell array of filenames (ex: 'stimuli_1.jpg')
%imgHeight: height you want the images to be in pixels
%           width is automatically scaled
function [images] = loadImages(wPtr, pics_dir, filenames, imgHeight)
    %Store the images in this cell array
    images = cell(length(filenames), 1);
    
    %The full paths to all the pictures
    image_paths = fullfile(pics_dir, filenames);
    
    for i=1:length(filenames);
        image_path = image_paths{i};

        try
            image = imread(image_path, 'JPG');
        catch errorInfo
            showImreadError(errorInfo, image_path);
            return
        end

        image = imresize(image, [imgHeight NaN]);
        images{i} = Screen('MakeTexture', wPtr, image);
    end
end




%% animateImage
%Moves an image left or right
%Returns what key was pressed as well as the reaction time
function [response, rt] = animateImage(winInfo, keyInfo, displayOptions, ...
                                       cond_table, cond_imgs, ...
                                       stimIdx, onset, trialEndTime, ITI)
    %I don't like using dots all over the place
    %winInfo
        wPtr = winInfo.wPtr;
        winHeight = winInfo.winHeight;
        winWidth = winInfo.winWidth;
	%keyInfo
        kbIdx = keyInfo.kbIdx;
        escapeKey = keyInfo.escapeKey;
        keyNames = KbName('KeyNames');
    %displayOptions
        imgHeight = displayOptions.imgHeight;
        speed = displayOptions.image_speed;
	
	
    %The real function starts here
    stimulus = cond_imgs{stimIdx};
    
    %Get the width of the image
    imgWidth = Screen('WindowSize', stimulus);

    %Set the start position for the stimulus (center)
    destRect = [winWidth/2  - imgWidth/2,  ... %left
                winHeight/2 - imgHeight/2, ... %top
                winWidth/2  + imgWidth/2,  ... %right
                winHeight/2 + imgHeight/2];    %bottom
    
    %Initialize response and reaction time to 0
    response = 0;
    rt = 0;
    pressed = 0;  %changes to 1 when a button is pressed
    
    %Show the stimulus
    Screen('DrawTexture', wPtr, stimulus, [], destRect);
    Screen(wPtr, 'Flip');
    
    while GetSecs < trialEndTime-ITI
        %Check for a button press
        [keyIsDown, ~, keyCode] = KbCheck(kbIdx);
        if pressed == 0 && keyIsDown == 1
            pressed = 1;
            response = keyNames{keyCode==1};
            rt = GetSecs - onset;
            
            if ischar(response)
                response = sscanf(response, '%d');
            end
        end
        
        %Exit the experiment if escape key is pressed
        if keyCode(KbName(escapeKey)) == 1
            Screen('CloseAll');
            ShowCursor;
            error('escape!')
        end
        
        %Move the position of the stimulus left or right
        if strcmp(cond_table.Left_Right{stimIdx}, 'left')
            destRect(1) = destRect(1) - speed;
            destRect(3) = destRect(3) - speed;
        else
            destRect(1) = destRect(1) + speed;
            destRect(3) = destRect(3) + speed;
        end
        
        Screen('DrawTexture', wPtr, stimulus, [], destRect);
        Screen(wPtr, 'Flip');
        
        WaitSecs('YieldSecs',0.0001);
    end
    
    %Blank ITI
    PTBhelper('stimText', wPtr, ' ');
    while GetSecs < trialEndTime
        %Check for a button press
        [keyIsDown, ~, keyCode] = KbCheck(kbIdx);
        if pressed == 0 && keyIsDown == 1
            pressed = 1;
            response = keyNames{keyCode==1};
            rt = GetSecs - onset;
            
            if ischar(response)
                response = sscanf(response, '%d');
            end
        end
        
        %Exit the experiment if escape key is pressed
        if keyCode(KbName(escapeKey)) == 1
            Screen('CloseAll');
            ShowCursor;
            error('escape!')
        end
    end
end



%% animateText
%Moves text left or right
%Returns what key was pressed as well as the reaction time
function [response, rt] = animateText(winInfo, keyInfo, displayOptions, ...
                                      cond_table,stimIdx, onset, ...
                                      trialEndTime, ITI)
	%I don't like using dots all over the place
    %winInfo
        wPtr = winInfo.wPtr;
        winHeight = winInfo.winHeight;
        winWidth = winInfo.winWidth;
	%keyInfo
        kbIdx = keyInfo.kbIdx;
        escapeKey = keyInfo.escapeKey;
        keyNames = KbName('KeyNames');
    %displayOptions
        sentFontSize = displayOptions.sentFontSize;
        speed = displayOptions.sent_speed;
        
	%The real function starts here
    stimulus = cond_table.Stimulus{stimIdx};
    
    %Set the start position for the stimulus (center)
    destRect = [winWidth/2,  ... %left
                winHeight/2, ... %top
                winWidth/2,  ... %right
                winHeight/2];    %bottom
    
    %Initialize response and reaction time to 0
    response = 0;
    rt = 0;
    pressed = 0;  %changes to 1 when a button is pressed
    
    %Show the stimulus
    Screen('TextSize', wPtr , sentFontSize);
    DrawFormattedText(wPtr, stimulus, 'center', 'center', ...
                      [], [], [], [], [], [], destRect);
    Screen(wPtr, 'Flip');
    
    while GetSecs < trialEndTime-ITI
        %Check for a button press
        [keyIsDown, ~, keyCode] = KbCheck(kbIdx);
        if pressed == 0 && keyIsDown == 1
            pressed = 1;
            response = keyNames{keyCode==1};
            rt = GetSecs - onset;
            
            if ischar(response)
                response = sscanf(response, '%d');
            end
        end
        
        %Exit the experiment if escape key is pressed
        if keyCode(KbName(escapeKey)) == 1
            Screen('CloseAll');
            ShowCursor;
            error('escape!')
        end
        
        %Move the position of the stimulus left or right
        if strcmp(cond_table.Left_Right{stimIdx}, 'left')
            destRect(1) = destRect(1) - speed;
            destRect(3) = destRect(3) - speed;
        else
            destRect(1) = destRect(1) + speed;
            destRect(3) = destRect(3) + speed;
        end
        
        DrawFormattedText(wPtr, stimulus, 'center', 'center', ...
                      [], [], [], [], [], [], destRect);
        Screen(wPtr, 'Flip');
        
        WaitSecs('YieldSecs',0.0001);
    end
    
    
    %Blank ITI
    PTBhelper('stimText', wPtr, ' ');
    while GetSecs < trialEndTime
        %Check for a button press
        [keyIsDown, ~, keyCode] = KbCheck(kbIdx);
        if pressed == 0 && keyIsDown == 1
            pressed = 1;
            response = keyNames{keyCode==1};
            rt = GetSecs - onset;
            
            if ischar(response)
                response = sscanf(response, '%d');
            end
        end
        
        %Exit the experiment if escape key is pressed
        if keyCode(KbName(escapeKey)) == 1
            Screen('CloseAll');
            ShowCursor;
            error('escape!')
        end
    end
end



%% grade_results
function [results] = grade_results(results)
    rows_to_grade = ~strcmp(results.Condition, 'FIX');
    correct_answers = results.CorrectAnswer(rows_to_grade);
    responses = results.Response(rows_to_grade);
    accuracies = correct_answers == responses;
    results.Accuracy(rows_to_grade) = accuracies;
end



%% Debugging functions
function [wPtr, rect] = openDebugWindow(screenNum, rect)
    Screen('CloseAll');
    ShowCursor;
    clear Screen
    
    rect = rect / 2;
    rect(1) = 5;
    rect(2) = 5;

    java; %clear java cache
    KbName('UnifyKeyNames');
    warning('off','MATLAB:dispatcher:InexactMatch');
    AssertOpenGL;
    suppress_warnings = 1;
    Screen('Preference', 'SuppressAllWarnings', suppress_warnings);
    Screen('Preference', 'TextRenderer', 0);
    Screen('Preference', 'SkipSyncTests', 1);
    [wPtr,rect] = Screen('OpenWindow',screenNum,1,rect,[],[],[],[],[],kPsychGUIWindow,[]);
end



function showImreadError(errorInfo, img_filename)
    Screen('CloseAll');
    ShowCursor;
    
    fprintf('\nThere was a problem using imread with image stimuli:\n')
    fprintf('%s\n', img_filename)
    fprintf('\t%s%s\n', 'ERROR MESSAGE: ', errorInfo.message)
    fprintf('\tTry running incompatibleImgs() to see what files are giving you trouble.\n')
    fprintf('\tYou may want to check out: http://www.cmyk2rgb.com/\n')
end